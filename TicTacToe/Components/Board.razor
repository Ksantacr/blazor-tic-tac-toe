@inject GameState GameStateProvider
@inject IJSRuntime IJSRuntime
@inject GameService GameService
@implements IDisposable

<div>
    <div class="board-row">
        <Square value="0"
                OnClick="handleClick" />
        <Square value="1"
                OnClick="handleClick" />
        <Square value="2"
                OnClick="handleClick" />
    </div>
    <div class="board-row">
        <Square value="3"
                OnClick="handleClick" />
        <Square value="4"
                OnClick="handleClick" />
        <Square value="5"
                OnClick="handleClick" />
    </div>
    <div class="board-row">
        <Square value="6"
                OnClick="handleClick" />                        .
        <Square value="7"
                OnClick="handleClick" />                         .
        <Square value="8"
                OnClick="handleClick" />
    </div>
</div>

@code {

    [Parameter] public EventCallback<int> handleBoardClick { get; set; }
    protected override void OnInitialized()
    {
        GameStateProvider.OnChange += StateHasChanged;
    }

    async Task handleClick(int i)
    {
        var current = GameStateProvider.history[GameStateProvider.history.Count() - 1];

        if (!string.IsNullOrEmpty(GameService.calculateWinner(current)))
        {
            return;
        }

        await handleBoardClick.InvokeAsync(i);
    }

    public void Dispose()
    {
        GameStateProvider.OnChange -= StateHasChanged;
    }
}
